<#+
// <copyright file="EntityServiceTemplate.tt" company="QuickFramework">
//  Copyright ©QuickFramework. All Rights Reserved.
// </copyright>

public class EntityServiceTemplate : CSharpTemplate
{
    private T4ModelInfo _model;
        
    public EntityServiceTemplate(T4ModelInfo model)
    {
        _model = model;
    }

    /// <summary>
    /// 获取 生成的文件名，根据模型名定义
    /// </summary>
    public string FileName
    {
        get
        { 
            return string.Format("{0}Service.cs", _model.Name);
        }
    }

	public override string TransformText()
	{
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
//	   如存在本生成代码外的新需求，请在相同命名空间下创建同名分部类进行实现。
// </auto-generated>
//
// <copyright file="<#= _model.Name #>Service.cs">
//		Copyright(c)2013 QuickFramework.All rights reserved.
//		开发组织：QuickFramework
//		公司网站：QuickFramework
//		所属工程：Ecomm.Core.Service
//		生成时间：<#= DateTime.Now.ToString("yyyy-MM-dd HH:mm") #>
// </copyright>
//------------------------------------------------------------------------------


using System;
using System.ComponentModel.Composition;
using System.Linq;

using Quick.Framework.Tool;
using Ecomm.Domain.Models<#= _model.UseModuleDir ? "." + _model.ModuleName : null #>;
using Ecomm.Core.Repository<#= _model.UseModuleDir ? "." + _model.ModuleName : null #>;
using Ecomm.Site.Models<#= _model.UseModuleDir ? "." + _model.ModuleName : null #>.<#= _model.Name #>;
using System.Collections.Generic;
using Quick.Site.Common.Models;

namespace Ecomm.Core.Service<#= _model.UseModuleDir ? "." + _model.ModuleName : null #>.Impl
{
	/// <summary>
    /// 服务层实现 —— <#= _model.Name #>Service
    /// </summary>
    [Export(typeof(I<#= _model.Name #>Service))]
    public class <#= _model.Name #>Service : CoreServiceBase, I<#= _model.Name #>Service
    {
        #region 属性

        [Import]
        public I<#= _model.Name #>Repository <#= _model.Name #>Repository { get; set; }

        public IQueryable<<#= _model.Name #>> <#= _model.Name #>s
        {
            get { return <#= _model.Name #>Repository.Entities; }
        }

        #endregion

        #region 公共方法

        public OperationResult Insert(<#= _model.Name #>Model model)
        {
            var entity = new <#= _model.Name #>
            {
                Name = model.Name,
                Description = model.Description,
                OrderSort = model.OrderSort,
                Enabled = model.Enabled
            };
            <#= _model.Name #>Repository.Insert(entity);
            return new OperationResult(OperationResultType.Success, "添加成功");
        }

        public OperationResult Update(<#= _model.Name #>Model model)
        {
			var entity = <#= _model.Name #>s.First(t => t.Id == model.Id);
            entity.Name = model.Name;
			entity.Description = model.Description;
			entity.OrderSort = model.OrderSort;
			entity.Enabled = model.Enabled;

            <#= _model.Name #>Repository.Update(entity);
            return new OperationResult(OperationResultType.Success, "更新成功");
        }

        public OperationResult Delete(int Id)
        {
            var model = <#= _model.Name #>s.FirstOrDefault(t => t.Id == Id);
            model.IsDeleted = true;

            <#= _model.Name #>Repository.Update(model);
            return new OperationResult(OperationResultType.Success, "删除成功");
        }

        #endregion
    }
}
<#+
        return this.GenerationEnvironment.ToString();
	}
}
#>
