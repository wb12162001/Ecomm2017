//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
//	   如存在本生成代码外的新需求，请在相同命名空间下创建同名分部类进行实现。
// </auto-generated>
//
// <copyright file="RoleModulePermissionPermissionService.cs">
//		Copyright(c)2013 QuickFramework.All rights reserved.
//		开发组织：QuickFramework
//		公司网站：QuickFramework
//		所属工程：Ecomm.Core.Service
//		生成时间：2013-12-11 23:55
// </copyright>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel.Composition;
using System.Linq;

using Ecomm.Domain.Models.Authen;
using Quick.Framework.Tool;
using Ecomm.Core.Repository.Authen;
using Ecomm.Site.Models.Authen.Permission;
using System.Collections.Generic;
using Ecomm.Site.Models.Authen.RoleModulePermission;


namespace Ecomm.Core.Service.Authen.Impl
{
	/// <summary>
    /// 服务层实现 —— RoleModulePermissionService
    /// </summary>
    [Export(typeof(IRoleModulePermissionService))]
    public class RoleModulePermissionService : CoreServiceBase, IRoleModulePermissionService
    {
        #region 属性

        [Import]
        public IRoleModulePermissionRepository RoleModulePermissionRepository { get; set; }

        public IQueryable<RoleModulePermission> RoleModulePermissions
        {
            get { return RoleModulePermissionRepository.Entities; }
        }

        #endregion

        #region 公共方法

        public OperationResult SetRoleModulePermission(int roleId, IEnumerable<RoleModulePermissionModel> addModulePermissionList, IEnumerable<RoleModulePermissionModel> removeModulePermissionList)
        {
            //逻辑删除
            if (removeModulePermissionList.Count() > 0)
            {
                foreach (var rmp in removeModulePermissionList)
                {
                    var updateEntity = RoleModulePermissions.FirstOrDefault(t => t.RoleId == roleId && t.ModuleId == rmp.ModuleId && t.PermissionId == rmp.PermissionId && t.IsDeleted == false);
                    if (updateEntity != null)
                    {
                        updateEntity.IsDeleted = true;
                        RoleModulePermissionRepository.Update(updateEntity);
                    }
                }         
            }
            //插入 & 更新
            if (addModulePermissionList.Count() > 0)
            {
                foreach (var amp in addModulePermissionList)
                {
                    var updateEntity = RoleModulePermissions.FirstOrDefault(t => t.RoleId == roleId && t.ModuleId == amp.ModuleId && t.PermissionId == amp.PermissionId && t.IsDeleted == true);
                    if (updateEntity != null)
                    {
                        updateEntity.IsDeleted = false;
                        RoleModulePermissionRepository.Update(updateEntity);
                    }
                    else 
                    {
                        var addEntity = new RoleModulePermission
                        {
                            RoleId = roleId,
                            ModuleId = amp.ModuleId,
                            PermissionId = amp.PermissionId
                        };
                        RoleModulePermissionRepository.Insert(addEntity);
                    }
                }
            }

			return new OperationResult(OperationResultType.Success, "授权成功");
        }       

        #endregion
    }
}
